timport java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EuclideanDistance {

    public static double calculateDistance(int[] point1, int[] point2) {
        return Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));
    }

    public static int findMode(List<Integer> distances) {
        Map<Integer, Integer> countMap = new HashMap<>();
        int maxCount = 0;
        int mode = 0;

        for (int distance : distances) {
            int count = countMap.getOrDefault(distance, 0) + 1;
            countMap.put(distance, count);

            if (count > maxCount) {
                maxCount = count;
                mode = distance;
            }
        }

        return mode;
    }

    public static void main(String[] args) {
        int[][] coordinates = { {-11, 3}, {8, 5}, {-3, 2}, {9, 17} };
        List<Integer> distances = new ArrayList<>();

        for (int i = 0; i < coordinates.length - 1; i++) {
            int[] point1 = coordinates[i];
            int[] point2 = coordinates[i + 1];
            double distance = Math.floor(calculateDistance(point1, point2));
            distances.add((int) distance);
        }

        int mode = findMode(distances);
        System.out.println("The mode of the distances is: " + mode);
    }
}
