import java.util.*;

class ExclusiveTime {
    public List<Integer> exclusiveTime(int n, List<String> logs) {
        List<Integer> exclusiveTimes = new ArrayList<>(Collections.nCopies(n, 0));
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;

        for (String log : logs) {
            String[] parts = log.split(":");
            int functionId = Integer.parseInt(parts[0]);
            String status = parts[1];
            int timestamp = Integer.parseInt(parts[2]);

            if (status.equals("start")) {
                if (!stack.isEmpty()) {
                    exclusiveTimes.set(stack.peek(), exclusiveTimes.get(stack.peek()) + timestamp - prevTime);
                }
                stack.push(functionId);
                prevTime = timestamp;
            } else {
                exclusiveTimes.set(stack.pop(), exclusiveTimes.get(stack.pop()) + timestamp - prevTime + 1);
                prevTime = timestamp + 1;
            }
        }
        return exclusiveTimes;
    }
}

// Usage example:
public class Main {
    public static void main(String[] args) {
        int n = 3;
        List<String> logs = Arrays.asList("0:start:0", "2:start:5", "1:start:7", "1:end:10", "0:end:15");
        
        ExclusiveTime exclusiveTime = new ExclusiveTime();
        List<Integer> result = exclusiveTime.exclusiveTime(n, logs);
        System.out.println(result);
    }
}
import java.util.*;

public class EuclideanDistance {

    public static double calculateDistance(List<Integer> point1, List<Integer> point2) {
        return Math.sqrt(Math.pow(point2.get(0) - point1.get(0), 2) + Math.pow(point2.get(1) - point1.get(1), 2));
    }

    public static List<Integer> findMode(List<Integer> distances) {
        Map<Integer, Integer> countMap = new HashMap<>();
        List<Integer> modes = new ArrayList<>();
        int maxCount = 0;

        for (int distance : distances) {
            int count = countMap.getOrDefault(distance, 0) + 1;
            countMap.put(distance, count);

            if (count > maxCount) {
                maxCount = count;
                modes.clear();
                modes.add(distance);
            } else if (count == maxCount && !modes.contains(distance)) {
                modes.add(distance);
            }
        }

        return modes;
    }

    public static List<Integer> findModeInEuclideanDistances(List<List<Integer>> coordinates) {
        if (coordinates == null || coordinates.size() <= 1) {
            return Collections.singletonList(-1);
        }

        List<Integer> distances = new ArrayList<>();

        for (int i = 0; i < coordinates.size() - 1; i++) {
            List<Integer> point1 = coordinates.get(i);
            List<Integer> point2 = coordinates.get(i + 1);
            double distance = Math.floor(calculateDistance(point1, point2));
            distances.add((int) distance);
        }

        return findMode(distances);
    }

    public static void main(String[] args) {
        List<List<Integer>> coordinates = new ArrayList<>();
        coordinates.add(Arrays.asList(-11, 3));
        coordinates.add(Arrays.asList(8, 5));
        coordinates.add(Arrays.asList(-3, 2));
        coordinates.add(Arrays.asList(9, 17));

        List<Integer> mode = findModeInEuclideanDistances(coordinates);

        if (mode.size() == 1 && mode.get(0) == -1) {
            System.out.println("Input does not satisfy constraints.");
        } else {
            System.out.println("The mode(s) of the distances is: " + mode);
        }
    }
}
timport java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EuclideanDistance {

    public static double calculateDistance(int[] point1, int[] point2) {
        return Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));
    }

    public static int findMode(List<Integer> distances) {
        Map<Integer, Integer> countMap = new HashMap<>();
        int maxCount = 0;
        int mode = 0;

        for (int distance : distances) {
            int count = countMap.getOrDefault(distance, 0) + 1;
            countMap.put(distance, count);

            if (count > maxCount) {
                maxCount = count;
                mode = distance;
            }
        }

        return mode;
    }

    public static void main(String[] args) {
        int[][] coordinates = { {-11, 3}, {8, 5}, {-3, 2}, {9, 17} };
        List<Integer> distances = new ArrayList<>();

        for (int i = 0; i < coordinates.length - 1; i++) {
            int[] point1 = coordinates[i];
            int[] point2 = coordinates[i + 1];
            double distance = Math.floor(calculateDistance(point1, point2));
            distances.add((int) distance);
        }

        int mode = findMode(distances);
        System.out.println("The mode of the distances is: " + mode);
    }
}
